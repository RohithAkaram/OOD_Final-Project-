<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="com.auth0.jwt.interfaces.JWTVerifier" />
			<role name="FactoryMethod()" element="com.auth0.jwt.interfaces.JWTVerifier::verify(java.lang.String):com.auth0.jwt.interfaces.DecodedJWT" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton" />
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Adapter" element="com.auth0.jwt.algorithms.ECDSAAlgorithm" />
			<role name="adaptee" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::crypto:com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Request()" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::verify(com.auth0.jwt.interfaces.DecodedJWT):void" />
			<role name="Request()" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::sign(byte[]):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Adapter" element="com.auth0.jwt.algorithms.HMACAlgorithm" />
			<role name="adaptee" element="com.auth0.jwt.algorithms.HMACAlgorithm::crypto:com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Request()" element="com.auth0.jwt.algorithms.HMACAlgorithm::verify(com.auth0.jwt.interfaces.DecodedJWT):void" />
			<role name="Request()" element="com.auth0.jwt.algorithms.HMACAlgorithm::sign(byte[]):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Adapter" element="com.auth0.jwt.algorithms.RSAAlgorithm" />
			<role name="adaptee" element="com.auth0.jwt.algorithms.RSAAlgorithm::crypto:com.auth0.jwt.algorithms.CryptoHelper" />
			<role name="Request()" element="com.auth0.jwt.algorithms.RSAAlgorithm::verify(com.auth0.jwt.interfaces.DecodedJWT):void" />
			<role name="Request()" element="com.auth0.jwt.algorithms.RSAAlgorithm::sign(byte[]):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.interfaces.ECDSAKeyProvider" />
			<role name="Adapter" element="com.auth0.jwt.algorithms.ECDSAAlgorithm" />
			<role name="adaptee" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::keyProvider:com.auth0.jwt.interfaces.ECDSAKeyProvider" />
			<role name="Request()" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::verify(com.auth0.jwt.interfaces.DecodedJWT):void" />
			<role name="Request()" element="com.auth0.jwt.algorithms.ECDSAAlgorithm::sign(byte[]):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.interfaces.RSAKeyProvider" />
			<role name="Adapter" element="com.auth0.jwt.algorithms.RSAAlgorithm" />
			<role name="adaptee" element="com.auth0.jwt.algorithms.RSAAlgorithm::keyProvider:com.auth0.jwt.interfaces.RSAKeyProvider" />
			<role name="Request()" element="com.auth0.jwt.algorithms.RSAAlgorithm::verify(com.auth0.jwt.interfaces.DecodedJWT):void" />
			<role name="Request()" element="com.auth0.jwt.algorithms.RSAAlgorithm::sign(byte[]):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.auth0.jwt.algorithms.Algorithm" />
			<role name="Adapter" element="com.auth0.jwt.JWTVerifier" />
			<role name="adaptee" element="com.auth0.jwt.JWTVerifier::algorithm:com.auth0.jwt.algorithms.Algorithm" />
			<role name="Request()" element="com.auth0.jwt.JWTVerifier::verify(com.auth0.jwt.interfaces.DecodedJWT):com.auth0.jwt.interfaces.DecodedJWT" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite" />
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="com.auth0.jwt.interfaces.Header" />
			<role name="Decorator" element="com.auth0.jwt.JWTDecoder" />
			<role name="component" element="com.auth0.jwt.JWTDecoder::header:com.auth0.jwt.interfaces.Header" />
			<role name="Operation()" element="com.auth0.jwt.JWTDecoder::getAlgorithm():java.lang.String" />
			<role name="Operation()" element="com.auth0.jwt.JWTDecoder::getType():java.lang.String" />
			<role name="Operation()" element="com.auth0.jwt.JWTDecoder::getContentType():java.lang.String" />
			<role name="Operation()" element="com.auth0.jwt.JWTDecoder::getKeyId():java.lang.String" />
			<role name="Operation()" element="com.auth0.jwt.JWTDecoder::getHeaderClaim(java.lang.String):com.auth0.jwt.interfaces.Claim" />
		</instance>
	</pattern>
	<pattern name="Observer" />
	<pattern name="State">
		<instance>
			<role name="Context" element="com.auth0.jwt.JWTDecoder" />
			<role name="State" element="com.auth0.jwt.interfaces.Payload" />
			<role name="state" element="com.auth0.jwt.JWTDecoder::payload:com.auth0.jwt.interfaces.Payload" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getIssuer():java.lang.String" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getSubject():java.lang.String" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getAudience():java.util.List" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getExpiresAt():java.util.Date" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getNotBefore():java.util.Date" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getIssuedAt():java.util.Date" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getId():java.lang.String" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getClaim(java.lang.String):com.auth0.jwt.interfaces.Claim" />
			<role name="Request()" element="com.auth0.jwt.JWTDecoder::getClaims():java.util.Map" />
		</instance>
		<instance>
			<role name="Context" element="com.auth0.jwt.JWTVerifier" />
			<role name="State" element="com.auth0.jwt.algorithms.Algorithm" />
			<role name="state" element="com.auth0.jwt.JWTVerifier::algorithm:com.auth0.jwt.algorithms.Algorithm" />
			<role name="Request()" element="com.auth0.jwt.JWTVerifier::verify(com.auth0.jwt.interfaces.DecodedJWT):com.auth0.jwt.interfaces.DecodedJWT" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge" />
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.auth0.jwt.algorithms.Algorithm" />
			<role name="TemplateMethod()" element="com.auth0.jwt.algorithms.Algorithm::sign(byte[], byte[]):byte[]" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy" />
	<pattern name="Proxy2" />
	<pattern name="Chain of Responsibility" />
</system>

